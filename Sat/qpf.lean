
import Sat.Tactics
import Sat.Quot
import Sat.CategoryTheory

open Nat

namespace Function

@[simp]
def applied (v : Œ±) (f : Œ± ‚Üí Œ≤) := f v

variable {f : Œ± ‚Üí Œ≤} {g g' : Œ≤ ‚Üí Œ≥} {h : Œ≥ ‚Üí œÉ}

@[simp]
theorem id_comp : (_root_.id ‚àò f) = f :=
by apply funext; intro; refl

@[simp]
theorem comp_id : (f ‚àò _root_.id) = f :=
by apply funext; intro; refl

@[simp]
theorem comp_assoc : (h ‚àò g) ‚àò f = h ‚àò (g ‚àò f) :=
by apply funext; intro; refl

theorem comp_reassoc : g = g' ‚Üí g ‚àò f = g' ‚àò f :=
by intros h; subst h; refl

end Function

inductive Fin' : Nat ‚Üí Type
| ZFin {n} : Fin' (succ n)
| SFin {n} : Fin' n ‚Üí Fin' (succ n)

inductive Vec (Œ± : Type u) : Nat ‚Üí Type u
| nil : Vec Œ± 0
| cons {n} : Œ± ‚Üí Vec Œ± n ‚Üí Vec Œ± (succ n)

namespace Vec

def mk {Œ±} : {n : Nat} ‚Üí (f : Fin' n ‚Üí Œ±) ‚Üí Vec Œ± n
| 0, f => Vec.nil
| succ n, f => Vec.cons (f $ Fin'.ZFin) (mk $ Œª i => f $ Fin'.SFin i)

def apply {Œ±} {n : Nat} : Vec Œ± n ‚Üí Fin' n ‚Üí Œ±
| Vec.cons x xs, Fin'.ZFin => x
| Vec.cons x xs, Fin'.SFin i => apply xs i

def map {Œ± Œ≤} (f : Œ± ‚Üí Œ≤) : {n : Nat} ‚Üí Vec Œ± n ‚Üí Vec Œ≤ n
| 0, Vec.nil => Vec.nil
| _, Vec.cons x xs => Vec.cons (f x) (map f xs)

@[simp]
theorem map_id' {Œ±} {n : Nat} v :
  Vec.map (n := n) (@id Œ±) v = v := by
induction v with
| nil => refl
| cons x xs ih => simp [ih, map]

@[simp]
theorem map_id {Œ±} {n : Nat} :
  Vec.map (n := n) (@id Œ±) = id := by
apply funext; intros x
apply map_id'

@[simp]
theorem map_comp' {Œ± Œ≤ Œ≥} (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) {n : Nat} v :
  Vec.map (n := n) g (Vec.map f v) = Vec.map (g ‚àò f) v := by
simp [Function.comp]
induction v with
| nil => refl
| cons x xs ih => simp [ih, map]

@[simp]
theorem map_comp {Œ± Œ≤ Œ≥} (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) {n : Nat} :
  Vec.map (n := n) g ‚àò Vec.map f = Vec.map (g ‚àò f) := by
apply funext; intros x
apply map_comp'

@[simp]
theorem apply_map {Œ± Œ≤} (f : Œ± ‚Üí Œ≤) (v : Vec Œ± n) i :
  (v.map f).apply i = f (v.apply i) := by
induction i <;>
  cases v <;> simp [map, apply, *]

@[simp]
theorem map_mk {Œ± Œ≤} (f : Œ± ‚Üí Œ≤) (v : Fin' n ‚Üí Œ±) :
  ((Vec.mk v).map f) = Vec.mk (f ‚àò v) := by
induction n <;>
  simp [map, mk, (¬∑‚àò¬∑), *]

@[simp]
theorem apply_mk {Œ±} : ‚àÄ {n : Nat} (f : Fin' n ‚Üí Œ±) (i : Fin' n),
  (mk f).apply i = f i
| _, f, Fin'.ZFin => rfl
| _, f, Fin'.SFin i => by simp [mk, apply, apply_mk]

def unapplied {f : Œ± ‚Üí Sort _} :
  {n : Nat} ‚Üí {v : Vec Œ± n} ‚Üí {i : Fin' n} ‚Üí (v.map f).apply i ‚Üí f (v.apply i)
| _, Vec.cons x xs, Fin'.ZFin, a => a
| _, Vec.cons x xs, Fin'.SFin i, a => unapplied (v := xs) (i := i) a

def unapplied‚ÇÇ {Œ± Œ≤ : Type _} {f : Œ± ‚Üí Œ≤ ‚Üí Sort _} {x} :
  {n : Nat} ‚Üí {v : Vec Œ± n} ‚Üí {i : Fin' n} ‚Üí
    (v.map f).apply i x ‚Üí
    f (v.apply i) x
| _, Vec.cons x xs, Fin'.ZFin, a => a
| _, Vec.cons x xs, Fin'.SFin i, a => unapplied‚ÇÇ (v := xs) (i := i) a

def applied {f : Œ± ‚Üí Sort _} :
  {n : Nat} ‚Üí {v : Vec Œ± n} ‚Üí {i : Fin' n} ‚Üí f (v.apply i) ‚Üí (v.map f).apply i
| _, Vec.cons x xs, Fin'.ZFin, a => a
| _, Vec.cons x xs, Fin'.SFin i, a => applied (v := xs) (i := i) a

end Vec

def TypeVec := Vec (Type _)

namespace TypeVec
export Vec (nil cons)
end TypeVec

inductive TypeMap : {n : Nat} ‚Üí TypeVec n ‚Üí TypeVec n ‚Üí Type _
| nil : TypeMap TypeVec.nil TypeVec.nil
| cons  {a b} {n : Nat} {xs ys : TypeVec n} :
  (a ‚Üí b) ‚Üí TypeMap xs ys ‚Üí TypeMap (TypeVec.cons a xs) (TypeVec.cons b ys)

namespace TypeMap

protected def id : {n : Nat} ‚Üí {v : TypeVec n} ‚Üí TypeMap v v
| 0, TypeVec.nil => TypeMap.nil
| succ n, TypeVec.cons a xs => TypeMap.cons _root_.id TypeMap.id

def comp : {n : Nat} ‚Üí {v‚ÇÄ v‚ÇÅ v‚ÇÇ : TypeVec n} ‚Üí
    TypeMap v‚ÇÅ v‚ÇÇ ‚Üí
    TypeMap v‚ÇÄ v‚ÇÅ ‚Üí
    TypeMap v‚ÇÄ v‚ÇÇ
| 0, _, _, _, TypeMap.nil, TypeMap.nil => TypeMap.nil
| succ n, _, _, _, TypeMap.cons f fs, TypeMap.cons g gs =>
  TypeMap.cons (f ‚àò g) (comp fs gs)

section Notations

local infixr:20 " ‚ü∂ " => TypeMap
local infixr:60 " ‚äö " => TypeMap.comp
local notation "ùüô" => TypeMap.id
-- notation "ùüô_" => TypeMap.id

def apply {n} {v‚ÇÄ v‚ÇÅ : TypeVec n} : (v‚ÇÄ ‚ü∂ v‚ÇÅ) ‚Üí (i : Fin' n) ‚Üí v‚ÇÄ.apply i ‚Üí v‚ÇÅ.apply i
| cons f fs, Fin'.ZFin, x => f x
| cons f fs, Fin'.SFin i, x => apply fs i x

def mk {n} : {v‚ÇÄ v‚ÇÅ : TypeVec n} ‚Üí ((i : Fin' n) ‚Üí v‚ÇÄ.apply i ‚Üí v‚ÇÅ.apply i) ‚Üí (v‚ÇÄ ‚ü∂ v‚ÇÅ)
| Vec.nil, Vec.nil, _ => TypeMap.nil
| Vec.cons x xs, Vec.cons y ys, f => TypeMap.cons (f Fin'.ZFin) (mk $ Œª i => f $ Fin'.SFin i)

@[simp]
theorem apply_mk' {n} {v‚ÇÄ v‚ÇÅ : TypeVec n}
  (f : (i : Fin' n) ‚Üí v‚ÇÄ.apply i ‚Üí v‚ÇÅ.apply i) i :
  (mk f).apply i = f i := by
induction i with
| ZFin =>
  cases v‚ÇÄ; cases v‚ÇÅ
  simp [apply]
| SFin n ih =>
  cases v‚ÇÄ; cases v‚ÇÅ
  apply funext; intros v
  simp [apply, ih]

@[simp]
theorem apply_mk {n} {v‚ÇÄ v‚ÇÅ : TypeVec n}
  (f : (i : Fin' n) ‚Üí v‚ÇÄ.apply i ‚Üí v‚ÇÅ.apply i) :
  (mk f).apply = f := by
apply funext
apply apply_mk'

@[simp]
theorem mk_apply {n} {v‚ÇÄ v‚ÇÅ : TypeVec n}
  (f : v‚ÇÄ ‚ü∂ v‚ÇÅ) :
  mk f.apply = f := by
induction f with
| nil =>
  simp [apply]; refl
| cons f fs ih =>
  simp [apply]
  conv =>
    rhs
    rw [‚Üê ih]
  skip

@[simp]
theorem comp_id : ‚àÄ {n : Nat} {v‚ÇÄ v‚ÇÅ : TypeVec n} (f : v‚ÇÄ ‚ü∂ v‚ÇÅ), f ‚äö ùüô = f
| 0, _,_, TypeMap.nil => rfl
| succ n, _,_, TypeMap.cons f fs => by
  simp [TypeMap.comp, @comp_id n]

@[simp]
theorem id_comp : ‚àÄ {n : Nat} {v‚ÇÄ v‚ÇÅ : TypeVec n} (f : v‚ÇÄ ‚ü∂ v‚ÇÅ), ùüô ‚äö f = f
| 0, _,_, TypeMap.nil => rfl
| succ n, _,_, TypeMap.cons f fs => by
  simp [TypeMap.comp, @id_comp n]

@[simp]
theorem comp_assoc : ‚àÄ {n : Nat} {v‚ÇÄ v‚ÇÅ v‚ÇÇ v‚ÇÉ : TypeVec n}
  (f : v‚ÇÄ ‚ü∂ v‚ÇÅ) (g : v‚ÇÅ ‚ü∂ v‚ÇÇ) (h : v‚ÇÇ ‚ü∂ v‚ÇÉ), (h ‚äö g) ‚äö f = h ‚äö (g ‚äö f)
| 0, _, _, _, _, TypeMap.nil, TypeMap.nil, TypeMap.nil => rfl
| succ n, _, _, _, _, TypeMap.cons f fs, TypeMap.cons g gs, TypeMap.cons h hs => by
  simp [TypeMap.comp, @comp_assoc n]

end Notations

open category_theory

instance {n} : Category (TypeVec.{u} n) where
  hom := TypeMap
  id := TypeMap.id
  comp := TypeMap.comp
  id_comp := TypeMap.id_comp
  comp_id := TypeMap.comp_id
  assoc := TypeMap.comp_assoc

instance {n} : Category (Vec.{u+1} (Type u) n) :=
inferInstanceAs (Category (TypeVec n))

theorem comp_reassoc {n : Nat} {v‚ÇÄ v‚ÇÅ v‚ÇÇ v‚ÇÉ : TypeVec n}
  (f : v‚ÇÄ ‚ü∂ v‚ÇÅ) (g g' : v‚ÇÅ ‚ü∂ v‚ÇÇ) : g = g' ‚Üí g ‚äö f = g' ‚äö f :=
by intros h; subst h; refl

protected def map {v‚ÇÄ : Vec Œ± n} {v‚ÇÅ : Vec Œ≤ n} (f : Œ± ‚Üí Type u) (g : Œ≤ ‚Üí Type u)
  (F : ‚àÄ i, f (v‚ÇÄ.apply i) ‚Üí g (v‚ÇÅ.apply i)) :
  Vec.map f v‚ÇÄ ‚ü∂ Vec.map g v‚ÇÅ :=
match n, v‚ÇÄ, v‚ÇÅ, F with
| _, Vec.nil, Vec.nil, F => TypeMap.nil
| _, Vec.cons x xs, Vec.cons y ys, F =>
  TypeMap.cons (F Fin'.ZFin) (TypeMap.map f g $ Œª i => F $ Fin'.SFin i)

@[simp]
protected def map_id {v‚ÇÄ : Vec Œ± n} (f : Œ± ‚Üí Type u) :
   TypeMap.map (v‚ÇÄ := v‚ÇÄ) f f (Œª i => ùüô_ (f (Vec.apply v‚ÇÄ i))) = ùüô := by
induction v‚ÇÄ with
| nil => simp [TypeMap.map]; refl
| cons x xs ih => simp [TypeMap.map, ih]; refl

@[simp]
protected def map_comp {v‚ÇÄ v‚ÇÅ v‚ÇÇ : Vec _ n}
  (f‚ÇÄ : Œ±‚ÇÄ ‚Üí Type u)
  (f‚ÇÅ : Œ±‚ÇÅ ‚Üí Type u)
  (f‚ÇÇ : Œ±‚ÇÇ ‚Üí Type u)
  (F‚ÇÄ : ‚àÄ i, f‚ÇÄ (v‚ÇÄ.apply i) ‚ü∂ f‚ÇÅ (v‚ÇÅ.apply i))
  (F‚ÇÅ : ‚àÄ i, f‚ÇÅ (v‚ÇÅ.apply i) ‚ü∂ f‚ÇÇ (v‚ÇÇ.apply i)) :
   TypeMap.map _ _ F‚ÇÅ ‚äö TypeMap.map _ _ F‚ÇÄ =
   TypeMap.map _ _ Œª i => F‚ÇÅ i ‚äö F‚ÇÄ i := by
simp [(¬∑‚äö¬∑)]
induction v‚ÇÄ
all_goals { cases v‚ÇÅ; cases v‚ÇÇ; simp [TypeMap.map, *, comp] }

end TypeMap
open category_theory

-- class NFunctor {n} (F : TypeVec n ‚Üí Type u) where
--   map : {a b : TypeVec n} ‚Üí (a ‚ü∂ b) ‚Üí F a ‚Üí F b
--   map_id : ‚àÄ {a : TypeVec n}, map (ùüô_ a) = id
--   map_comp : ‚àÄ {a b c : TypeVec n} (f : a ‚ü∂ b) (g : b ‚ü∂ c),
--     (map g ‚àò map f) = map (g ‚äö f)

-- attribute [simp] NFunctor.map_id NFunctor.map_comp

-- class NFunctor {n} (F : TypeVec n ‚Üí Type u) where
--   map : {a b : TypeVec n} ‚Üí (a ‚ü∂ b) ‚Üí F a ‚Üí F b
--   map_id : ‚àÄ {a : TypeVec n}, map (ùüô_ a) = id
--   map_comp : ‚àÄ {a b c : TypeVec n} (f : a ‚ü∂ b) (g : b ‚ü∂ c),
--     (map g ‚àò map f) = map (g ‚äö f)

-- attribute [simp] NFunctor.map_id NFunctor.map_comp
open category_theory
open category_theory.IsFunctor

namespace NFunctor

def set {n} (F : TypeVec (succ n) ‚Üí Type u) (v : Type _) (vs : TypeVec n) : Type u :=
F $ TypeVec.cons v vs

namespace set
variable (F : TypeVec (succ n) ‚Üí Type u) [IsFunctor F]

protected def map v (f : a ‚ü∂ b) : set F v a ‚ü∂ set F v b :=
show F (TypeVec.cons v a) ‚ü∂ F (TypeVec.cons v b) from
let g : TypeVec.cons v a ‚ü∂ TypeVec.cons v b :=
        TypeMap.cons _root_.id f
map (F := F) g

protected theorem map_id :
  set.map F v ùüô = @id (set F v a) :=
map_id

protected theorem map_comp {a b c : TypeVec n} (f : a ‚ü∂ b) (g : b ‚ü∂ c) :
  set.map F v g ‚äö set.map F v f = set.map F v (g ‚äö f) :=
by simp [set.map]; simp [(¬∑‚äö¬∑), TypeMap.comp]

end set

instance (F : TypeVec (succ n) ‚Üí Type u) [IsFunctor F] :
         IsFunctor (set F v) where
  map := set.map F v
  map_id := set.map_id F
  map_comp := set.map_comp F

-- def comp {n m}
--   (Gs : Vec (Sigma $ @NFunctor.{v} m) n)
--   (F : TypeVec.{v} n ‚Üí Type u) (v : TypeVec m) : Type u :=
-- match n, Gs, F with
-- | 0, Vec.nil, F => F Vec.nil
-- | _, Vec.cons G Gs, F =>
--   comp Gs
--     (set F (G.1 v)) v
open Function (applied)

def comp {n m}
  (Gs : Vec (TypeVec.{u‚ÇÇ} m ‚Üí Type u‚ÇÅ) n)
  (F : TypeVec.{u‚ÇÅ} n ‚Üí Type u‚ÇÄ) (v : TypeVec m) : Type u‚ÇÄ :=
F (Gs.map $ applied v)

namespace comp

protected def map {n m}
  (Gs : Vec (TypeVec.{u‚ÇÇ} m ‚Üí Type u‚ÇÅ) n)
  [‚àÄ i, IsFunctor $ Gs.apply i]
  (F : TypeVec.{u‚ÇÅ} n ‚Üí Type u‚ÇÄ) [IsFunctor F]
  {v‚ÇÄ v‚ÇÅ : TypeVec m} (f : v‚ÇÄ ‚ü∂ v‚ÇÅ) :
  comp Gs F v‚ÇÄ ‚ü∂ comp Gs F v‚ÇÅ :=
show F _ ‚ü∂ F _ from
map (TypeMap.map _ _ $ Œª i =>
  show Gs.apply i v‚ÇÄ ‚ü∂ Gs.apply i v‚ÇÅ from
  map f)

variable
  (Gs : Vec (TypeVec.{u‚ÇÇ} m ‚Üí Type u‚ÇÅ) n)
  [‚àÄ i, IsFunctor $ Gs.apply i]
  (F : TypeVec.{u‚ÇÅ} n ‚Üí Type u‚ÇÄ) [IsFunctor F]

protected theorem map_id {v‚ÇÄ : TypeVec m} :
  comp.map Gs F ùüô = @id (comp Gs F v‚ÇÄ) := by
simp [comp.map]; refl

protected theorem map_comp {v‚ÇÄ : TypeVec m} (f : v‚ÇÄ ‚ü∂ v‚ÇÅ) (g : v‚ÇÅ ‚ü∂ v‚ÇÇ) :
  comp.map Gs F g ‚äö comp.map Gs F f = comp.map Gs F (g ‚äö f) := by
simp [comp.map]
rewrite [TypeMap.map_comp]
simp

instance : IsFunctor (comp Gs F) where
  map := comp.map Gs F
  map_id := comp.map_id Gs F
  map_comp := comp.map_comp Gs F

end comp

end NFunctor

structure PFunctor (n : Nat) where
  A : Type u
  B : A ‚Üí TypeVec.{u} n

namespace PFunctor

variable {n : Nat} (P : PFunctor.{u} n)

protected structure apply' (v : TypeVec.{u} n) : Type u where
mk_impl ::
  a : P.A
  b_pi : ‚àÄ i, (P.B a).apply i ‚Üí v.apply i

def apply := @PFunctor.apply'

namespace apply
variable {P}

protected def b {v} (x : PFunctor.apply P v) : P.B x.a ‚ü∂ v :=
TypeMap.mk x.b_pi

@[matchPattern]
protected def mk {v} a (f : P.B a ‚ü∂ v) : PFunctor.apply P v :=
PFunctor.apply'.mk_impl a f.apply

@[simp]
theorem a_mk {v} a (f : P.B a ‚ü∂ v) :
  (apply.mk a f).a = a := rfl

@[simp]
theorem b_mk {v} a (f : P.B a ‚ü∂ v) :
  (apply.mk a f).b = f :=
by simp [apply.mk, apply.b]


@[recursor 1]
def casesOn {motive : PFunctor.apply P v ‚Üí Sort _}
  (x : P.apply v)
  (f : ‚àÄ a b, motive (apply.mk a b)) :
  motive x := by
specialize f x.a x.b
simp [apply.mk, apply.b] at f
cases x; assumption

end apply

protected def map {a b : TypeVec n}
  (f : a ‚ü∂ b) (x : P.apply a) : P.apply b :=
PFunctor.apply.mk x.a (f ‚äö x.b)
-- #exit

protected def map_id {a : TypeVec n} : PFunctor.map P ùüô = @id (P.apply a) := by
  apply funext
  intros x; cases x using apply.casesOn
  simp [PFunctor.map]; refl

protected def map_comp {a b c : TypeVec n} (f : a ‚ü∂ b) (g : b ‚ü∂ c) :
  PFunctor.map P g ‚àò PFunctor.map P f = PFunctor.map P (g ‚äö f) := by
  apply funext
  intros x; cases x using apply.casesOn
  simp [PFunctor.map]; refl

instance : IsFunctor P.apply where
  map := PFunctor.map P
  map_id := PFunctor.map_id P
  map_comp := PFunctor.map_comp P

instance instNFunctorApplyApply {m} (v : Vec (PFunctor n) m) i :
  IsFunctor ((v.map PFunctor.apply).apply i) :=
match m, v, i with
| _, Vec.cons x xs, Fin'.ZFin => instIsFunctor _
| _, Vec.cons x xs, Fin'.SFin i => instNFunctorApplyApply xs i

end PFunctor

open NFunctor
-- structure NatTrans (F : TypeVec n ‚Üí Type u)
--           (G : TypeVec n ‚Üí Type v)
--           [IsFunctor F] [IsFunctor G] where
--   trans v : F v ‚Üí G v
--   naturality {v‚ÇÄ v‚ÇÅ} (f : v‚ÇÄ ‚ü∂ v‚ÇÅ) :
--     map f ‚àò trans v‚ÇÄ = trans v‚ÇÅ ‚àò map f

-- infix:40 " ‚üπ " => NatTrans

-- attribute [simp] NatTrans.naturality

-- namespace NatTrans

-- variable {F‚ÇÄ F‚ÇÅ F‚ÇÇ F‚ÇÉ : TypeVec n ‚Üí _}
-- variable [NFunctor F‚ÇÄ] [NFunctor F‚ÇÅ] [NFunctor F‚ÇÇ] [NFunctor F‚ÇÉ]

-- @[simp]
-- theorem naturality_reassoc (f : F‚ÇÄ ‚üπ F‚ÇÅ) {Œ±}
--         {v‚ÇÄ v‚ÇÅ} (h : v‚ÇÄ ‚ü∂ v‚ÇÅ) (g : Œ± ‚Üí F‚ÇÄ v‚ÇÄ) :
--   map h ‚àò f.trans v‚ÇÄ ‚àò g = f.trans v‚ÇÅ ‚àò map h ‚àò g := by
-- rw [‚Üê Function.comp_assoc, naturality, Function.comp_assoc]

-- protected def id : F‚ÇÄ ‚üπ F‚ÇÄ where
--   trans v := id
--   naturality := by
--     intros v‚ÇÄ v‚ÇÅ f
--     apply funext; intros; refl

-- protected def comp (g : F‚ÇÅ ‚üπ F‚ÇÇ) (f : F‚ÇÄ ‚üπ F‚ÇÅ) : F‚ÇÄ ‚üπ F‚ÇÇ where
--   trans v := g.trans v ‚àò f.trans v
--   naturality := by intros; simp

-- infixr:60 " ‚äó " => NatTrans.comp

-- variable (f f' : F‚ÇÄ ‚üπ F‚ÇÅ) (g : F‚ÇÅ ‚üπ F‚ÇÇ) (h : F‚ÇÇ ‚üπ F‚ÇÉ)

-- protected theorem ext
--           (h : ‚àÄ x, f.trans x = f'.trans x) :
--   f = f' := by
-- cases f; cases f'
-- simp; apply funext
-- apply h

-- @[simp]
-- theorem id_comp : (NatTrans.id ‚äó f) = f := by
-- apply NatTrans.ext; intros; refl

-- @[simp]
-- theorem comp_id : (f ‚äó NatTrans.id) = f := by
-- apply NatTrans.ext; intros; refl

-- @[simp]
-- theorem comp_assoc : (h ‚äó g) ‚äó f = h ‚äó (g ‚äó f) := by
-- apply NatTrans.ext; intros; refl

-- end NatTrans

-- structure Equiv (F G : TypeVec n ‚Üí Type _)
--           [NFunctor F] [NFunctor G] where
--   to : F ‚üπ G
--   inv : G ‚üπ F
--   to_inv : to ‚äó inv = NatTrans.id
--   inv_to : inv ‚äó to = NatTrans.id

-- namespace Equiv

-- variable
--   {F G H J : TypeVec n ‚Üí Type _}
--   [NFunctor F] [NFunctor G] [NFunctor H] [NFunctor J]

-- attribute [simp] Equiv.to_inv Equiv.inv_to

-- @[simp]
-- theorem to_inv_reassoc (f : Equiv F G) (g : H ‚üπ G) :
--   f.to ‚äó f.inv ‚äó g = g :=
-- by rw [‚Üê NatTrans.comp_assoc, to_inv, NatTrans.id_comp]

-- @[simp]
-- theorem inv_to_reassoc (f : Equiv F G) (g : H ‚üπ F) :
--   f.inv ‚äó f.to ‚äó g = g :=
-- by rw [‚Üê NatTrans.comp_assoc, inv_to, NatTrans.id_comp]

-- protected def id : Equiv F F where
--   to := NatTrans.id
--   inv := NatTrans.id
--   to_inv := by simp
--   inv_to := by simp

-- @[simp] protected theorem to_id : (@Equiv.id _ F _).to = NatTrans.id := rfl
-- @[simp] protected theorem inv_id : (@Equiv.id _ F _).inv = NatTrans.id := rfl

-- protected def comp (f : Equiv G H) (g : Equiv F G) :
--           Equiv F H where
--   to := f.to ‚äó g.to
--   inv := g.inv ‚äó f.inv
--   to_inv := by simp
--   inv_to := by simp

-- @[simp] protected theorem to_comp (f : Equiv G H) (g : Equiv F G) :
--   (f.comp g).to = f.to.comp g.to := rfl

-- @[simp] protected theorem inv_comp (f : Equiv G H) (g : Equiv F G) :
--   (f.comp g).inv = g.inv.comp f.inv := rfl

-- protected def symm (f : Equiv F G) : Equiv G F where
--   to := f.inv
--   inv := f.to
--   to_inv := f.inv_to
--   inv_to := f.to_inv

-- @[simp] protected theorem to_symm (f : Equiv F G) :
--   f.symm.to = f.inv := rfl

-- @[simp] protected theorem inv_symm (f : Equiv F G) :
--   f.symm.inv = f.to := rfl

-- protected theorem ext {f g : Equiv F G} :
--   f.to = g.to ‚Üí f = g := by
-- cases f with | mk fto finv fto_inv finv_to =>
-- cases g with | mk gto ginv gto_inv ginv_to =>
-- simp; intros h
-- constructor; assumption
-- have : _ ‚äó _ = _ ‚äó _ := congrArg (Œª x => ginv ‚äó x) fto_inv
-- rw [h, ‚Üê NatTrans.comp_assoc, ginv_to] at this
-- simp at this; assumption

-- @[simp]
-- theorem id_comp (f : Equiv F G) : Equiv.id.comp f = f :=
-- Equiv.ext $ by simp

-- @[simp]
-- theorem comp_id (f : Equiv F G) : f.comp Equiv.id = f :=
-- Equiv.ext $ by simp

-- @[simp]
-- theorem comp_assoc (f : Equiv F G) (g : Equiv G H) (h : Equiv H J) :
--   (h.comp g).comp f = h.comp (g.comp f) :=
-- Equiv.ext $ by simp

-- @[simp]
-- theorem symm_id : (@Equiv.id _ F _).symm = Equiv.id :=
-- Equiv.ext $ by simp

-- @[simp]
-- theorem symm_comp (f : Equiv F G) (g : Equiv G H) :
--   (g.comp f).symm = f.symm.comp g.symm :=
-- Equiv.ext $ by simp

-- @[simp]
-- theorem symm_symm (f : Equiv F G) :
--   f.symm.symm = f :=
-- Equiv.ext $ by simp

-- end Equiv

structure RelationF (F : TypeVec n ‚Üí Type _) where
  get {v : TypeVec n} : F v ‚Üí F v ‚Üí Prop

structure RelationF.apply {F : TypeVec n ‚Üí Type _} (R : RelationF F) {X v} (x y : X ‚ü∂ F v) : Prop where
  get : ‚àÄ i, R.get (x i) (y i)

instance {F : TypeVec n ‚Üí Type _} : CoeFun (RelationF F) (Œª _ => ‚àÄ {X v} (x y : X ‚ü∂ F v), Prop) where
  coe R {X v} f g := RelationF.apply R f g

class FunctorialRel (F : TypeVec n ‚Üí Type _) [IsFunctor F] (R : RelationF F) where
  map {v‚ÇÄ v‚ÇÅ} {X} (x y : X ‚ü∂ F v‚ÇÄ) (f : v‚ÇÄ ‚ü∂ v‚ÇÅ) :
    R x y ‚Üí R (map (F := F) f ‚äö x) (map (F := F) f ‚äö y)

namespace FunctorialRel
open IsFunctor
variable
  {F : TypeVec n ‚Üí Type _} [IsFunctor F]
  (R : RelationF F) [FunctorialRel F R]

def map' {v‚ÇÄ v‚ÇÅ} (x y : F v‚ÇÄ) (f : v‚ÇÄ ‚ü∂ v‚ÇÅ) :
    R.get x y ‚Üí
    R.apply (IsFunctor.map f x) (IsFunctor.map f y) := by
intros H i
apply map; apply H

end FunctorialRel



def QuotF (F : TypeVec n ‚Üí Type _)
          (R : RelationF F)
          (v : TypeVec n) : Type _ :=
Quot (@R v)

namespace QuotF

variable {F : TypeVec n ‚Üí Type _} [IsFunctor F]
         (R : RelationF F) [FunctorialRel F R]

protected def mk {a b : TypeVec n} (f : a ‚ü∂ b) : F a ‚ü∂ QuotF F R b :=
Quot.mk _ ‚äö map f

protected def lift {a b : TypeVec n} (f : a ‚ü∂ b)
              (Hf : ‚àÄ {X} (g‚ÇÄ g‚ÇÅ : X ‚ü∂ F a), ) :
  QuotF F R a ‚ü∂ F b :=
Quot.lift (map f : F a ‚ü∂ F b) _

protected def map (f : a ‚ü∂ b) : QuotF F R a ‚Üí QuotF F R b :=
Quot.lift (Quot.mk (FunctorialRel) ‚äö map f : _ ‚Üí _) $ by
  intros x y Hxy
  have Hxy := FunctorialRel.map _ _ f Hxy
  simp [QuotF, Quot.eq]
  apply EqvGen.once; assumption

protected def map_id : QuotF.map F R ùüô = @id (QuotF F R a) :=
funext $ Quot.ind $ by intros; simp [QuotF.map]

protected def map_comp (f : a ‚ü∂ b) (g : b ‚ü∂ c) :
  QuotF.map F R g ‚àò QuotF.map F R f = QuotF.map F R (g ‚äö f) :=
funext $ Quot.ind $
by intros; simp [QuotF.map]; rw [‚Üê NFunctor.map_comp]; refl

end QuotF

instance (F : TypeVec n ‚Üí Type u) [NFunctor F]
         (R : RelationF F) [FunctorialRel F R] :
         NFunctor (QuotF F R) where
  map := QuotF.map F R
  map_id := QuotF.map_id F R
  map_comp := QuotF.map_comp F R

class IsPolynomial (F : TypeVec n ‚Üí Type _) [NFunctor F] where
  P : PFunctor n
  P_equiv : Equiv F P.apply

namespace IsPolynomial

namespace comp

section P

variable (P : PFunctor.{u} n) (Ps : Fin' n ‚Üí PFunctor.{u} m)
-- #check @Vec.map
-- def apply (v : TypeVec m) : ‚àÉ x, P.apply (Ps.map $ Œª p => p.apply v) = x := by
-- constructor
-- simp only [PFunctor.apply]

protected def P' : PFunctor.{u} m :=
‚ü®Œ£ a : P.A, (i : Fin' n) ‚Üí (P.B a).apply i ‚Üí (Ps i).A,
 Œª ‚ü®a, Fb‚ü© =>
 Vec.mk $ Œª i =>
 Œ£ (j : Fin' n),
 Œ£ (b : (P.B a).apply j),
   ((Ps j).B $ Fb _ b).apply i
 ‚ü©
-- set_option pp.universes true
-- #check Ps
-- #exit
-- protected def doop (i : Fin' n) (v : TypeVec.{u} m) :
--   (Vec.map (Function.applied v) (Vec.map PFunctor.apply Ps)).apply i ‚Üí
--   (Ps.apply i).apply v :=
-- Œª a =>
-- Vec.unapplied‚ÇÇ (Vec.unapplied a)

protected def to_trans (v : TypeVec.{u} m) :
  comp (Vec.mk $ PFunctor.apply ‚àò Ps) P.apply v ‚Üí
  (comp.P' P Ps).apply v
-- | PFunctor.apply.mk a b => _
| ‚ü®a, b‚ü© =>
  ‚ü® ‚ü®a,
    Œª i x =>
      PFunctor.apply.a (Vec.unapplied $ b _ _)‚ü©,
    Œª i  =>
        _
 -- (comp.doop _ _ _ (b j k)).2 _ h'.2.2
‚ü©

#check comp.to_trans

theorem to_trans_mk (v : TypeVec m) (a : P.A) f :
  comp.to_trans P Ps v (PFunctor.apply.mk a f) =
  PFunctor.apply.mk (Sigma.mk a _) _  := _

-- #exit

protected def to : comp (Vec.map PFunctor.apply Ps) P.apply ‚üπ (comp.P' P Ps).apply where
  trans := comp.to_trans P Ps
  naturality := by
    intros
    apply funext; intros x
    cases x using PFunctor.apply.casesOn
    simp [Function.comp]
    simp [comp.to_trans, map, PFunctor.map, NFunctor.comp, PFunctor.apply.b]

end P

variable
  (Gs : Vec (TypeVec.{u} m ‚Üí Type u) n)
  [‚àÄ i, NFunctor (Gs.apply i)]
  [HG : ‚àÄ i, IsPolynomial (Gs.apply i) ]
  (F : TypeVec.{u} n ‚Üí Type u) [@NFunctor n F] [IsPolynomial F]

protected def P : PFunctor.{u} m :=
comp.P' (P F) $ Œª i => P (Gs.apply i)

namespace P_equiv

def to : comp Gs F ‚üπ (comp.P Gs F).apply where
  trans v := _ ‚àò (@P_equiv _ F _ _).to.trans _
  naturality := _

def inv : (comp.P Gs F).apply ‚üπ comp Gs F := _

end P_equiv

def P_equiv : Equiv (comp Gs F) (PFunctor.apply (comp.P Gs F)) where
  to := _
  inv := _
  to_inv := _
  inv_to := _

instance : IsPolynomial (comp Gs F) where
  P := comp.P Gs F
  P_equiv := _

end comp

end IsPolynomial

class QPF (F : TypeVec n ‚Üí Type u) [NFunctor F] where
  inner : TypeVec n ‚Üí Type u
  [inner_Functor : NFunctor inner]
  [inner_isPoly : IsPolynomial inner]
  R : RelationF inner
  [R_functorial : FunctorialRel inner R]
  equiv : Equiv F (QuotF inner R)

attribute [instance] QPF.inner_Functor QPF.inner_isPoly QPF.R_functorial

namespace QPF
variable  (F : TypeVec n ‚Üí Type u) [NFunctor F] [QPF F]

def abs {v} : inner F v ‚Üí F v := equiv.inv.trans _ ‚àò Quot.mk _

theorem abs_nat {v‚ÇÄ v‚ÇÅ} (f : v‚ÇÄ ‚ü∂ v‚ÇÅ) :
map f ‚àò abs F = abs F ‚àò map f := by
  simp [abs]; simp only [Function.comp]
  apply funext; intros x
  apply congrArg; simp [map, QuotF.map]


end QPF

-- Todo:
-- Preserved under
-- composition
-- (co)fixpoint
-- quotient
